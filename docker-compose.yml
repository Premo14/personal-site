services:
  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Bind the nginx configuration file
      - ./certs:/etc/nginx/certs:ro  # Bind the directory where SSL certificates are stored
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - app-network

  mysql:
    image: mariadb:10
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -p$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    working_dir: /app
    ports:
      - "${VITE_APP_BACKEND_PORT}:${VITE_APP_BACKEND_PORT}"
    environment:
      MYSQL_HOST: mysql
      MYSQL_PORT: $MYSQL_PORT
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
      GO_ENV: $GO_ENV
      VITE_APP_BACKEND_PORT: $VITE_APP_BACKEND_PORT
      VITE_APP_FRONTEND_PORT: $VITE_APP_FRONTEND_PORT
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    container_name: frontend
    build:
      context: ./react
      dockerfile: Dockerfile
    working_dir: /app
    ports:
      - "${VITE_APP_FRONTEND_PORT}:${VITE_APP_FRONTEND_PORT}"
    volumes:
      - ./react:/app
      - /app/node_modules
    environment:
      REACT_ENV: $REACT_ENV
      FRONTEND_PORT: $VITE_APP_FRONTEND_PORT
      VITE_APP_BACKEND_PORT: $VITE_APP_BACKEND_PORT
      VITE_APP_PROTOCOL: $VITE_APP_PROTOCOL
      VITE_APP_BASE_URI: $VITE_APP_BASE_URI
    command: npm run dev
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3000 || exit 1" ]  # Check the internal port 80
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mysql-data:
    driver: local
    driver_opts:
      type: none
      device: ./data
      o: bind

networks:
  app-network:
    driver: bridge
