import {Badge, Box, Flex, Spinner, Text} from "@chakra-ui/react";import {FaCheckCircle, FaTimesCircle} from "react-icons/fa";import { MdDelete } from "react-icons/md";import {Todo} from "./TodoList.tsx";import {useMutation, useQueryClient} from "@tanstack/react-query";const PROTOCOL = process.env.REACT_APP_PROTOCOL;const BASE_URI = process.env.REACT_APP_BASE_URI;const BACKEND_PORT = process.env.REACT_APP_BACKEND_PORT;if (!PROTOCOL || !BASE_URI || !BACKEND_PORT) {    throw new Error("Missing required environment variables");}const BASE_URL = `${PROTOCOL}://${BASE_URI}:${BACKEND_PORT}/api`;const TodoItem = ({ todo }: { todo: Todo }) => {    const queryClient = useQueryClient()    const {mutate:updateTodo, isPending:isUpdating}        = useMutation({        mutationKey:["updateTodo"],        mutationFn:async()=>{            try {                const res = await fetch(BASE_URL + `/todos/${todo.id}`, {                    method: "PATCH",                })                const data = await res.json();                if (!res.ok) {                    throw new Error(data.error || "Something went wrong!");                }            } catch (error) {                console.error(error);            }        },        onSuccess: () => {            queryClient.invalidateQueries({queryKey:["todos"]})        }    })    const {mutate: deleteTodo, isPending: isDeleting} = useMutation({        mutationKey: ["deleteTodo"],        mutationFn:async()=>{            try {                const res = await fetch(BASE_URL + `/todos/${todo.id}`, {                    method: "DELETE",                })                const data = await res.json();                if (!res.ok) {                    throw new Error(data.error || "Something went wrong!");                }                return data;            } catch (error) {                console.error(error)            }        },        onSuccess: () => {            queryClient.invalidateQueries({queryKey:["todos"]})        }    })    return (        <Flex gap={2} alignItems={"center"}>            <Flex                flex={1}                alignItems={"center"}                border={"1px"}                borderColor={"gray.600"}                p={2}                borderRadius={"lg"}                justifyContent={"space-between"}            >                <Text                    color={todo.completed ? "green.200" : "yellow.100"}                    textDecoration={todo.completed ? "line-through" : "none"}                >                    {todo.body}                </Text>                {todo.completed && (                    <Badge ml='1' colorScheme='green'>                        Completed                    </Badge>                )}                {!todo.completed && (                    <Badge ml='1' colorScheme='yellow'>                        In Progress                    </Badge>                )}            </Flex>            <Flex gap={2} alignItems={"center"}>                <Box                    color={todo.completed ? "red.500" : "green.500"}                    cursor={"pointer"}                    onClick={() => updateTodo()}                >                    {!isUpdating && (                        todo.completed ? <FaTimesCircle size={20} /> : <FaCheckCircle size={20} />                    )}                    {isUpdating && <Spinner size={"sm"} />}                </Box>                <Box color={"red.500"} cursor={"pointer"} onClick={() => deleteTodo()}>                    {!isDeleting && <MdDelete size={25}/>}                    {isDeleting && <Spinner size={"sm"}/>}                </Box>            </Flex>        </Flex>    );};export default TodoItem;